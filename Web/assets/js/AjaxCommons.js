// Generated by CoffeeScript 1.3.3

/*
A Wrapper around any Ajax Calls made by River Watch
Author Matthew Betts
*/


(function() {
  var BASE_URL, CONTENT_TYPE, DATA_TYPE, PROCESS_DATA, RWCall, TIMEOUT;

  BASE_URL = "http://barretts.ecs.vuw.ac.nz:4567/wainz/";

  CONTENT_TYPE = "contentType";

  PROCESS_DATA = false;

  TIMEOUT = 5000;

  DATA_TYPE = "jsonp";

  /*
  Make an AJAX Put request to the River Watch Server
  
  	onSuccess (data) - function to execute on a successfull put, data is the responce from the server
  	onFailure (data) - function to execute on a failed put, data is the resonce from the server
  	data - Data the send to the server, this should be a map of maps\objects\primitives
  	path - the path to add onto the url for the requested service
  */


  RWCall = function(onSuccess, onFailure, data, path, args, callType) {
    var ajaxLoader, json;
    ajaxLoader = $("#ajaxLoader");
    ajaxLoader.css("display", "block");
    json = JSON.stringify(data);
    return $.ajax({
      url: BASE_URL + path + args,
      dataType: "jsonp",
      success: function(msg) {
        onSuccess(msg);
        return ajaxLoader.css("display", "none");
      },
      error: function(msg) {
        onFailure(msg);
        return ajaxLoader.css("display", "none");
      }
    });
  };

  /*
  Make an AJAX Gete request to the River Watch Server
  
  	onSuccess (data) - function to execute on a successfull get, data is the responce from the server
  	onFailure (data) - function to execute on a failed get, data is the resonce from the server
  	args - Arguments to send to the server, this should be a map of keys to string values
  	path - The path to add onto the url for the requested service
  */


  /*
  Save calls, so that can be accessed globaly across the website.
  */


  Window.RWCall = RWCall;

}).call(this);
