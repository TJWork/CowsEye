// Generated by CoffeeScript 1.3.3

/*
A Wrapper around any Ajax Calls made by River Watch
Author Matthew Betts
*/


(function() {
  var BASE_URL, CONTENT_TYPE, DATA_TYPE, GET_TYPE, PROCESS_DATA, PUT_TYPE, RWCall, RWGet, RWPut, TIMEOUT;

  BASE_URL = "http://localhost:1469/";

  PUT_TYPE = "PUT";

  GET_TYPE = "GET";

  CONTENT_TYPE = "contentType";

  PROCESS_DATA = false;

  TIMEOUT = 5000;

  DATA_TYPE = "jsonp";

  /*
  Make an AJAX Put request to the River Watch Server
  
  	onSuccess (data) - function to execute on a successfull put, data is the responce from the server
  	onFailure (data) - function to execute on a failed put, data is the resonce from the server
  	data - Data the send to the server, this should be a map of maps\objects\primitives
  	path - the path to add onto the url for the requested service
  */


  RWPut = function(onSuccess, onFailure, data, path) {
    var json;
    json = JSON.stringify(data);
    return $.ajax({
      type: PUT_TYPE,
      url: BASE_URL + path,
      data: json,
      dataType: DATA_TYPE,
      processData: PROCESS_DATA,
      contentType: CONTENT_TYPE,
      timeout: TIMEOUT,
      success: onSuccess,
      error: onFailure
    });
  };

  /*
  Make an AJAX Put request to the River Watch Server
  
  	onSuccess (data) - function to execute on a successfull put, data is the responce from the server
  	onFailure (data) - function to execute on a failed put, data is the resonce from the server
  	data - Data the send to the server, this should be a map of maps\objects\primitives
  	path - the path to add onto the url for the requested service
  */


  RWCall = function(onSuccess, onFailure, data, path, args, callType) {
    var allArguments, first, json, key, _i, _len;
    first = true;
    allArguments = "";
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      key = args[_i];
      if (first) {
        first = false;
        allArguments += "?";
      } else {
        allArguments += "&";
      }
      allArguments += "" + key + " = " + args[key];
    }
    json = JSON.stringify(data);
    console.log(allArguments);
    return $.ajax({
      type: callType,
      url: BASE_URL + path + allArguments,
      data: json,
      dataType: DATA_TYPE,
      processData: PROCESS_DATA,
      contentType: CONTENT_TYPE,
      timeout: TIMEOUT,
      success: onSuccess,
      error: onFailure
    });
  };

  /*
  Make an AJAX Gete request to the River Watch Server
  
  	onSuccess (data) - function to execute on a successfull get, data is the responce from the server
  	onFailure (data) - function to execute on a failed get, data is the resonce from the server
  	args - Arguments to send to the server, this should be a map of keys to string values
  	path - The path to add onto the url for the requested service
  */


  RWGet = function(onSuccess, onFailure, args, path) {
    var allArguments, first, key, _i, _len;
    first = true;
    allArguments = "";
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      key = args[_i];
      if (first) {
        first = false;
        allArguments += "?";
      } else {
        allArguments += "&";
      }
      allArguments += "" + key + " = " + args[key];
    }
    return $.ajax({
      type: GET_TYPE,
      url: BASE_URL + path,
      dataType: DATA_TYPE,
      processData: PROCESS_DATA,
      contentType: CONTENT_TYPE,
      timeout: TIMEOUT,
      success: onSuccess,
      error: onFailure
    });
  };

  /*
  Save calls, so that can be accessed globaly across the website.
  */


  Window.RWGet = RWGet;

  Window.RWPut = RWPut;

  Window.RWCall = RWCall;

}).call(this);
